plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.4'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.booleanuk'
version = '0.0.2'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.cloud:spring-cloud-function-adapter-aws:4.1.2'
	implementation('org.springframework.boot:spring-boot-starter-web') {
		exclude group: 'org.springframework.boot', module: 'spring-boot-starter-tomcat'
	}
	implementation 'com.amazonaws.serverless:aws-serverless-java-container-core:2.0.3'
	implementation 'com.amazonaws.serverless:aws-serverless-java-container-springboot3:2.0.3'
	implementation 'com.amazonaws:aws-lambda-java-core:1.2.2'
	implementation 'com.amazonaws:aws-lambda-java-events:3.11.1'
	runtimeOnly 'com.amazonaws:aws-lambda-java-log4j2:1.5.1'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}


jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	manifest {
		attributes 'Main-Class': 'com.booleanuk.Main'
	}

	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

tasks.register('buildZip', Zip) {
	into('lib') {
		from(jar)
		from(configurations.runtimeClasspath)
	}
}
